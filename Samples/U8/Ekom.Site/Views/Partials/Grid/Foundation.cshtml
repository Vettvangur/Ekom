@inherits UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@using Newtonsoft.Json.Linq
@*
    Razor helpers located at the bottom of this file
*@
@if (Model != null && Model.sections != null)
{
    var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;

    if (oneColumn)
    {
        foreach (var section in Model.sections)
        {
            foreach (var row in section.rows)
            {
                @renderRow(row, true);
            }
        }
    }
    else
    {
        <div class="grid-container">
            @foreach (var s in Model.sections)
            {

                <div class="cell medium-@s.grid">
                    @foreach (var row in s.rows)
                    {
                        @renderRow(row, false);
                    }
                </div>
            }
        </div>
    }

}
@helper renderRow(dynamic row, bool singleColumn)
{
    Dictionary<string, string> attributes = GetAttributes(row);

    var collapse = attributes.ContainsKey("collapse") && attributes["collapse"] == "1" ? "collapse" : "";
    var size = (attributes.ContainsKey("radiobuttonlist") ? attributes["radiobuttonlist"] : "");

    <div class="grid-container @collapse @(size != "normal" ? size : "")">
        @foreach (var area in row.areas)
        {
            <div class="cell medium-@area.grid">
                @foreach (var control in area.controls)
                {
                    if (control != null && control.editor != null && control.editor.view != null)
                    {
                        <text>@Html.Partial("grid/editors/base", (object)control)</text>
                    }
                }
            </div>
        }
    </div>

}

@functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var attrs = GetStringAttributes(contentItem);

        JObject style = contentItem.styles;

        if (style != null)
        {
            var cssVals = new List<string>();
            foreach (JProperty property in style.Properties())
                cssVals.Add(property.Name + ":" + property.Value.ToString() + ";");

            if (cssVals.Any())
                attrs.Add("style=\"" + string.Join(" ", cssVals) + "\"");
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }

    public static List<string> GetStringAttributes(dynamic row)
    {
        var attrs = new List<string>();
        JObject cfg = row.config;

        if (cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                attrs.Add(property.Name + "=\"" + property.Value.ToString() + "\"");
            }

        return attrs;

    }

    public static Dictionary<string, string> GetAttributes(dynamic row)
    {
        Dictionary<string, string> attrs = new Dictionary<string, string>();

        if (row != null)
        {
            JObject cfg = row.config;

            if (cfg != null)
                foreach (JProperty property in cfg.Properties())
                {
                    attrs.Add(property.Name, property.Value.ToString());
                }

        }

        return attrs;

    }


}
