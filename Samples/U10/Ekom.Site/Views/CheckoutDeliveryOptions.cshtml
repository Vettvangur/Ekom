@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
    Layout = "Master.cshtml";
    var currentMember = await _memberManager.GetCurrentMemberAsync();
    var memberAsContent = currentMember != null ? _memberManager.AsPublishedMember(currentMember) : null;

    var order = await _order.GetOrderAsync();

    var customerName = !string.IsNullOrEmpty(order.CustomerInformation.Customer.Name) ? order.CustomerInformation.Customer.Name : memberAsContent != null ? memberAsContent.Name : "";
    var customerEmail = !string.IsNullOrEmpty(order.CustomerInformation.Customer.Email) ? order.CustomerInformation.Customer.Email : currentMember != null ? currentMember.Email : "";
    var customerAddress = !string.IsNullOrEmpty(order.CustomerInformation.Customer.Address) ? order.CustomerInformation.Customer.Address : memberAsContent != null ? memberAsContent.Value<string>("address") : "";
    var customerApartment = !string.IsNullOrEmpty(order.CustomerInformation.Customer.Apartment) ? order.CustomerInformation.Customer.Apartment : memberAsContent != null ? memberAsContent.Value<string>("apartment") : "";
    var customerCity = !string.IsNullOrEmpty(order.CustomerInformation.Customer.City) ? order.CustomerInformation.Customer.City : memberAsContent != null ? memberAsContent.Value<string>("city") : "";
    var customerCountry = !string.IsNullOrEmpty(order.CustomerInformation.Customer.Country) ? order.CustomerInformation.Customer.Country : memberAsContent != null ? memberAsContent.Value<string>("country") : "";
    var customerRegion = !string.IsNullOrEmpty(order.CustomerInformation.Customer.Region) ? order.CustomerInformation.Customer.Region : memberAsContent != null ? memberAsContent.Value<string>("region") : "";
    var customerZipCode = !string.IsNullOrEmpty(order.CustomerInformation.Customer.ZipCode) ? order.CustomerInformation.Customer.ZipCode : memberAsContent != null ? memberAsContent.Value<string>("zipCode") : "";
    var customerPhone = !string.IsNullOrEmpty(order.CustomerInformation.Customer.Phone) ? order.CustomerInformation.Customer.Phone : memberAsContent != null ? memberAsContent.Value<string>("phone") : "";

    var siblings = Model.Siblings()?.Where(x => x.IsDocumentType("checkout"));

    var nextUrl = siblings.FirstOrDefault(x => x.SortOrder > Model.SortOrder)?.Url();

    var shippingProviders = _providers.GetShippingProviders(order.StoreInfo.Alias, orderAmount: order.OrderLineTotal.Value);
}

@section Main {

    @{
        if (order == null || order.TotalQuantity <= 0)
        {
            <main class="mx-auto max-w-2xl px-4 pb-24 pt-16 sm:px-6 lg:max-w-7xl lg:px-8">
                <partial name="ekom/components/noCartResult" />
            </main>

            return;
        }
    }

    <main class="mx-auto max-w-7xl px-4 pb-24 pt-16 sm:px-6 lg:px-8">
        <div class="mx-auto max-w-2xl lg:max-w-none">
            <h1 class="sr-only">Checkout</h1>

            @using (Html.BeginEkomForm(FormType.UpdateShippingProvider, htmlAttributes: new Dictionary<string, object> {
            { "class", "lg:grid lg:grid-cols-2 lg:gap-x-12 xl:gap-x-16" },
            { "x-data", "UpdateShippingProvider" },
            { "x-on:submit.prevent", "post"}
            }))
            {
                <input type="hidden" name="storeAlias" value="@order.StoreInfo.Alias" />
                <div>
                    <div>
                        <h1 class="text-lg font-medium text-gray-900 border-b border-gray-200 pb-5">Delivery options</h1>

                        <div>
                            <fieldset x-data="{
                                    selectedProvider: '@(order.ShippingProvider != null ? order.ShippingProvider.Key : Guid.Empty)'}">
                                <div class="mt-4 grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-4">
                                    @foreach (var provider in shippingProviders)
                                    {
                                        var selectedProvider = order.ShippingProvider != null && order.ShippingProvider.Id == provider.Id;

                                        <label :class="selectedProvider == '@provider.Key' ? 'border-transparent ring-2 ring-indigo-500' : 'border-gray-300'" class="relative flex cursor-pointer rounded-lg border bg-white p-4 shadow-sm focus:outline-none">
                                            <input type="radio" name="ShippingProvider" value="@provider.Key" class="sr-only" aria-labelledby="delivery-method-@provider.Id-label" aria-describedby="delivery-method-0-description-@provider.Id delivery-method-@provider.Id-description-1" required @(selectedProvider ? "checked" : "") @@change="selectedProvider = $event.target.value;">
                                            <span class="flex flex-1">
                                                <span class="flex flex-col">
                                                    <span id="delivery-method-@provider.Id-label" class="block text-sm font-medium text-gray-900">@provider.Title</span>
                                                    <span id="delivery-method-@provider.Id-description-0" class="mt-1 flex items-center text-sm text-gray-500">@provider.GetValue("description", order.Culture)</span>
                                                    <span id="delivery-method-@provider.Id-description-1" class="mt-6 text-sm font-medium text-gray-900">@provider.Price.WithVat.CurrencyString</span>
                                                </span>
                                            </span>
                                            <svg :class="selectedProvider == '@provider.Key' ? '' : 'hidden'" class="h-5 w-5 text-indigo-600" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"></path>
                                            </svg>
                                        </label>
                                    }
                                </div>
                            </fieldset>
                        </div>
                    </div>
                </div>

                <!-- Order summary -->
                <partial name="ekom/components/orderSummary" view-data="@(new ViewDataDictionary(ViewData) {
                    { "order", order },
                    { "buttonText" ,"Continue to payment options"}
                })" />
            }
        </div>
    </main>

    <script>
        document.addEventListener("alpine:init", () => {
            Alpine.data("UpdateShippingProvider", () => ({
                data() {
                    var formData = new FormData(this.$el);
                    const params = new URLSearchParams();
                    formData.forEach((value, key) => {
                        params.append(key, value);
                    });
                    return params.toString();
                },
                async post() {

                    var button = this.$el.querySelector('button[type=submit]');

                    button.disabled = true;

                    let message = '';

                    return await (
                        await fetch(this.$el.getAttribute('action'), {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/x-www-form-urlencoded",
                            },
                            body: this.data(),
                        }).then((response) => {

                            if (response.ok) {
                                window.location = '@nextUrl';
                            } else {
                                throw new Error();
                            }

                        }).catch((ex) => {
                            message = `<div class="rounded-md mt-5 bg-red-50 p-4 message">
                                            <div class="flex">
                                            <div class="flex-shrink-0">
                                                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
                                                </svg>
                                            </div>
                                            <div class="ml-3">
                                            <h3 class="text-sm font-medium text-red-800">Invalid data</h3>
                                                <div class="mt-2 text-sm text-red-700">
                                                    <p>Oops! Something went wrong. Please ensure all fields are filled out correctly.</p>
                                                </div>
                                            </div>
                                            </div>
                                        </div>`;
                        }).finally(() => {
                            button.disabled = false;
                            var successHtmlElement = this.$el.querySelector('.message');

                            if (successHtmlElement) {
                                successHtmlElement.outerHTML = message;
                            } else {
                                this.$el.insertAdjacentHTML('beforeend', message);
                            }

                        })
                    )
                },
            }));
        });
    </script>
}
